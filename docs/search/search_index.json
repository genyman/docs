{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Genyman\n\n\nGenyman is a .NET Core Global tool, a new .NET Core feature since the release of version 2.1. You can find more in the \nofficial document\n.\n\n\nWith Genyman it is possible to easily build code generation tools that uses a configuration file as input. This way you can use these files inside your dev environment and generate code over and over again with the same settings.\n\n\nHow to install\n\n\nTo install \ngenyman\n you need to execute the following command in your console / command prompt:\n\n\ndotnet tool install -g genyman\n\n\n\n\n\nAfter installation you will be prompted:\n\n\nYou can invoke the tool using the following command: genyman\nTool \ngenyman\n \n(\nversion \nx.x.x\n)\n was successfully installed.\n\n\n\n\n\n\n\nGetting help\n\n\nWhen you execute \ngenyman\n or \ngenyman --help\n you will get info about all available options.\n\n\n\n\nHow to update\n\n\nTo update the tool to the latest version:\n\n\ndotnet tool update -g genyman\n\n\n\n\n\n\n\nUpdate\n\n\nWe will add an indication when running \ngenyman\n if you are not running the latest version in a future release.\n\n\n\n\nHow to uninstall\n\n\nTo remove \ngenyman\n from your system:\n\n\ndotnet tool uninstall -g genyman", 
            "title": "Introduction"
        }, 
        {
            "location": "/#welcome-to-genyman", 
            "text": "Genyman is a .NET Core Global tool, a new .NET Core feature since the release of version 2.1. You can find more in the  official document .  With Genyman it is possible to easily build code generation tools that uses a configuration file as input. This way you can use these files inside your dev environment and generate code over and over again with the same settings.", 
            "title": "Welcome to Genyman"
        }, 
        {
            "location": "/#how-to-install", 
            "text": "To install  genyman  you need to execute the following command in your console / command prompt:  dotnet tool install -g genyman  After installation you will be prompted:  You can invoke the tool using the following command: genyman\nTool  genyman   ( version  x.x.x )  was successfully installed.   Getting help  When you execute  genyman  or  genyman --help  you will get info about all available options.", 
            "title": "How to install"
        }, 
        {
            "location": "/#how-to-update", 
            "text": "To update the tool to the latest version:  dotnet tool update -g genyman   Update  We will add an indication when running  genyman  if you are not running the latest version in a future release.", 
            "title": "How to update"
        }, 
        {
            "location": "/#how-to-uninstall", 
            "text": "To remove  genyman  from your system:  dotnet tool uninstall -g genyman", 
            "title": "How to uninstall"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Getting started\n\n\nNow that you have installed \ngenyman\n it is time to create your first generator. All generators are in fact .NET Core Tools but \ngenyman\n provides you an easy way to build and execute the generators. In fact, \ngenyman\n itself contains a code generator, more specific, to create a new generator.\n\n\nNEW command\n\n\nTo create a new code generator, create an empty folder, and then execute:\n\n\ngenyman new\n\n\n\n\n\nThis will produce a \ngm-genyman.json\n file. This gives you an idea on what \ngenyman\n is; it will use configuration files to generate, or execute code. Take a look at the produced \n.json\n file:\n\n\n{\n\n    \ngenyman\n:\n \n{\n\n        \npackageId\n:\n \nGenyman\n,\n\n        \ninfo\n:\n \nThis is a Genyman configuration file - https://genyman.github.io/docs/\n\n    \n},\n\n    \nconfiguration\n:\n \n{\n\n        \nprefix\n:\n \nYourPrefix\n,\n\n        \ntoolName\n:\n \nYourToolName\n,\n\n        \ndescription\n:\n \nAnother great Genyman generator!\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAll \ngenyman\n configuration files will have two parts; the first structure is \ngenyman\n. This will contain the name of the package that is used to execute this configuration file, together with the \nversion\n used to create the file and a \nnugetSource\n that is used to resolve the package (leave empty for the default \nnuget.org\n).\n\n\nThe second structure is \nconfiguration\n. Hereunder you will find the specific configuration parameters for the generator. In this case two values are available:\n\n\n\n\nprefix\n: this is actually the prefix used in the package identifier, mostly the username or organization name of the pacakge.\n\n\ntoolName\n: the specific name of the code generator you are going to build.\n\n\ndescription\n: a description of what the tool does.\n\n\n\n\nFor this tutorial we will enter the following:\n\n\n{\n\n    \ngenyman\n:\n \n{\n\n        \npackageId\n:\n \nGenyman\n,\n\n        \ninfo\n:\n \nThis is a Genyman configuration file - https://genyman.github.io/docs/\n\n    \n},\n\n    \nconfiguration\n:\n \n{\n\n        \nprefix\n:\n \nTutorial\n,\n\n        \ntoolName\n:\n \nFirstGenerator\n,\n\n        \ndescription\n:\n \nAnother great Genyman generator!\n\n    \n}\n\n\n}\n\n\n\n\n\n\nCreate a new generator solution\n\n\nAs said, the \nnew\n command from the genyman cli itself is a generator. The way you can execute the generator is just running\n\n\ngenyman gm-genyman.json\n\n\n\n\n\nAlternative is to run\n\n\ngenyman all\n\n\n\n\n\nThis will generate all generators in the current directory.\n\n\nThis will create a \nsrc\n folder which contains a template solution for you to create a new code generator.\n\n\nConfiguration\n\n\nIf you take a look at the solution, you will find an \nImplementation\n folder with a \nConfiguration.cs\n file. This is a placeholder class for your configuration parameters. Just like the configuration parameters we had to fill in for our new template. Basically you just add public properties to this class. Later these properties will be translated to parameters in you configuration file.\n\n\nFor this tutorial we are going to keep it simple - for a better sample just check the code in the genyman-cli repository.\n\n\npublic\n \nclass\n \nConfiguration\n\n\n{\n\n    \npublic\n \nstring\n \nValue1\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n    \npublic\n \nstring\n \nValue2\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n}\n\n\n\n\n\n\nTemplate\n\n\nYou saw that running the \nnew\n command produced a pre-filled configuration file. In order to get the same behavior you set properties for a \nConfiguration\n instance that is created in the \nNewTemplate.cs\n class:\n\n\npublic\n \nclass\n \nNewTemplate\n \n:\n \nConfiguration\n\n\n{\n\n    \npublic\n \nNewTemplate\n()\n\n    \n{\n\n        \nValue1\n \n=\n \nFirstSampleValue\n;\n\n        \nValue2\n \n=\n \nSecondSampleValue\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThis will later produce a configuration file with these values pre-filled.\n\n\nGenerator\n\n\nFinally, the \nGenerator.cs\n is the location where the real work has to be done. Following skeleton is your starting point:\n\n\ninternal\n \nclass\n \nGenerator\n \n:\n \nGenymanGenerator\nConfiguration\n\n\n{\n\n    \npublic\n \noverride\n \nvoid\n \nExecute\n()\n\n    \n{\n\n        \nProcessHandlebarTemplates\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\nIn this \nExecute\n you write the necessary code for your code generator. This method is called by \ngenyman\n and the \nConfiguration\n property of the class is a pre-filled \nConfiguration\n instance, having the values of the given configuration file (if not changed by the user, it will contain the default property values defined in the \nNewTemplate.cs\n class).\n\n\nYou can use whatever technique you want to generate code, but the easiest way to do is using \nHandlebars\n templates. These templates need to be added in the \nTemplates\n folder in your solution.\n\n\nTemplates\n\n\nIn the \nTemplates\n folders you can add any file you want to be included for your generator. The \ncsproj\n is configured to exclude these files for compilation, but to include these as content files later in your package. These files can contain any of the basic Handlebars identifiers, helpers, and even more, the file itself can have these identifiers. For a good example, check the \ngenyman\n cli repository.\n\n\nFor this tutorial we will add a simple csharp file.\n\n\nnamespace\n \nOurGenyman.Tutorial\n;\n\n\n{\n\n    \ninternal\n \nclass\n \nSample\n\n    \n{\n\n        \npublic\n \nstring\n \nFirstValue\n \n=\n \n{{ Value1 }}\n;\n\n        \npublic\n \nstring\n \nSecondValue\n \n=\n \n{{ Value2 }}\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\nJust name this file \nMyClass.cs\n.\n\n\nTest your generator\n\n\nThat's it! We are now ready to test our generator. As said, the created solution is just a plain .NET Core console application, packed as a tool. That means you can just run/debug the console application; in your favourite IDE you can start the application with the argument \nnew\n.\n\n\n\n\nNote\n\n\nTo test your generator, a good practice is to use a new folder outside your solution, and put this as the working directory when you run your program.\n\n\n\n\nThis will produce a \n.json\n file that contains your template values. Change these values at will. Next run/debug your application again, but this time provide the \njson\n file as the argument of your application.\n\n\nYou will see that the output is a MyClass.cs file with the \nValue1\n and \nValue2\n values replaced.\n\n\nYou can put breakpoints in the \nExecute\n method of your generator.\n\n\nNext\n\n\nThis is a quick overview on how you can create a new generator. Of course there is much more you can do; \ngenyman\n has some more nice features you can use. You will find out about these feature in the various sections of this documentation.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#getting-started", 
            "text": "Now that you have installed  genyman  it is time to create your first generator. All generators are in fact .NET Core Tools but  genyman  provides you an easy way to build and execute the generators. In fact,  genyman  itself contains a code generator, more specific, to create a new generator.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#new-command", 
            "text": "To create a new code generator, create an empty folder, and then execute:  genyman new  This will produce a  gm-genyman.json  file. This gives you an idea on what  genyman  is; it will use configuration files to generate, or execute code. Take a look at the produced  .json  file:  { \n     genyman :   { \n         packageId :   Genyman , \n         info :   This is a Genyman configuration file - https://genyman.github.io/docs/ \n     }, \n     configuration :   { \n         prefix :   YourPrefix , \n         toolName :   YourToolName , \n         description :   Another great Genyman generator! \n     }  }   All  genyman  configuration files will have two parts; the first structure is  genyman . This will contain the name of the package that is used to execute this configuration file, together with the  version  used to create the file and a  nugetSource  that is used to resolve the package (leave empty for the default  nuget.org ).  The second structure is  configuration . Hereunder you will find the specific configuration parameters for the generator. In this case two values are available:   prefix : this is actually the prefix used in the package identifier, mostly the username or organization name of the pacakge.  toolName : the specific name of the code generator you are going to build.  description : a description of what the tool does.   For this tutorial we will enter the following:  { \n     genyman :   { \n         packageId :   Genyman , \n         info :   This is a Genyman configuration file - https://genyman.github.io/docs/ \n     }, \n     configuration :   { \n         prefix :   Tutorial , \n         toolName :   FirstGenerator , \n         description :   Another great Genyman generator! \n     }  }", 
            "title": "NEW command"
        }, 
        {
            "location": "/getting_started/#create-a-new-generator-solution", 
            "text": "As said, the  new  command from the genyman cli itself is a generator. The way you can execute the generator is just running  genyman gm-genyman.json  Alternative is to run  genyman all  This will generate all generators in the current directory.  This will create a  src  folder which contains a template solution for you to create a new code generator.", 
            "title": "Create a new generator solution"
        }, 
        {
            "location": "/getting_started/#configuration", 
            "text": "If you take a look at the solution, you will find an  Implementation  folder with a  Configuration.cs  file. This is a placeholder class for your configuration parameters. Just like the configuration parameters we had to fill in for our new template. Basically you just add public properties to this class. Later these properties will be translated to parameters in you configuration file.  For this tutorial we are going to keep it simple - for a better sample just check the code in the genyman-cli repository.  public   class   Configuration  { \n     public   string   Value1   {   get ;   set ;   } \n     public   string   Value2   {   get ;   set ;   }  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/getting_started/#template", 
            "text": "You saw that running the  new  command produced a pre-filled configuration file. In order to get the same behavior you set properties for a  Configuration  instance that is created in the  NewTemplate.cs  class:  public   class   NewTemplate   :   Configuration  { \n     public   NewTemplate () \n     { \n         Value1   =   FirstSampleValue ; \n         Value2   =   SecondSampleValue ; \n     }  }   This will later produce a configuration file with these values pre-filled.", 
            "title": "Template"
        }, 
        {
            "location": "/getting_started/#generator", 
            "text": "Finally, the  Generator.cs  is the location where the real work has to be done. Following skeleton is your starting point:  internal   class   Generator   :   GenymanGenerator Configuration  { \n     public   override   void   Execute () \n     { \n         ProcessHandlebarTemplates (); \n     }  }   In this  Execute  you write the necessary code for your code generator. This method is called by  genyman  and the  Configuration  property of the class is a pre-filled  Configuration  instance, having the values of the given configuration file (if not changed by the user, it will contain the default property values defined in the  NewTemplate.cs  class).  You can use whatever technique you want to generate code, but the easiest way to do is using  Handlebars  templates. These templates need to be added in the  Templates  folder in your solution.", 
            "title": "Generator"
        }, 
        {
            "location": "/getting_started/#templates", 
            "text": "In the  Templates  folders you can add any file you want to be included for your generator. The  csproj  is configured to exclude these files for compilation, but to include these as content files later in your package. These files can contain any of the basic Handlebars identifiers, helpers, and even more, the file itself can have these identifiers. For a good example, check the  genyman  cli repository.  For this tutorial we will add a simple csharp file.  namespace   OurGenyman.Tutorial ;  { \n     internal   class   Sample \n     { \n         public   string   FirstValue   =   {{ Value1 }} ; \n         public   string   SecondValue   =   {{ Value2 }} ; \n     }  }   Just name this file  MyClass.cs .", 
            "title": "Templates"
        }, 
        {
            "location": "/getting_started/#test-your-generator", 
            "text": "That's it! We are now ready to test our generator. As said, the created solution is just a plain .NET Core console application, packed as a tool. That means you can just run/debug the console application; in your favourite IDE you can start the application with the argument  new .   Note  To test your generator, a good practice is to use a new folder outside your solution, and put this as the working directory when you run your program.   This will produce a  .json  file that contains your template values. Change these values at will. Next run/debug your application again, but this time provide the  json  file as the argument of your application.  You will see that the output is a MyClass.cs file with the  Value1  and  Value2  values replaced.  You can put breakpoints in the  Execute  method of your generator.", 
            "title": "Test your generator"
        }, 
        {
            "location": "/getting_started/#next", 
            "text": "This is a quick overview on how you can create a new generator. Of course there is much more you can do;  genyman  has some more nice features you can use. You will find out about these feature in the various sections of this documentation.", 
            "title": "Next"
        }, 
        {
            "location": "/reference/genyman-cli/", 
            "text": "genyman cli tool\n\n\nThe cli tool is the main tool of \ngenyman\n. \n\n\nFile argument\n\n\ngenyman your-config.json\n\n\nThis argument is used to use the given file as input for the code generator specified in that configuration file. The cli is responsible for downloading, installing and executing the genyman global tool.\n\n\nupdate option\n\n\ngenyman your-config.json --update\n\n\nThe \nupdate\n option will perform and update of the package first.\n\n\nNew Command\n\n\ngenyman new\n\n\nThis generates a new code generator solution template.\n\n\ngenyman new packageId\n\n\nWill generate a new configuration template for the given packageId. \nNote that you can use the fully qualified packageId, or just the last part of the packageId.\nFor example, if you packageId is \nMyGreatCompany.Genyman.MyFirstGenerator\n you can use \ngenyman new MyFirstGenerator\n.\n\n\njson option\n\n\ngenyman new --json\n\n\nThe json file format is the default format for configuration files. This option is now available for future support of other formats such as xml and yaml.\n\n\nfile option\n\n\ngenyman new --file \nYOUR_FILENAME\n\n\nIf not specified the default configuration file is created with the name \ngm-genyman.json\n. If you want to use another name you can use this option.\n\n\nupdate option\n\n\ngenyman new --update\n\n\nThe \nupdate\n option will perform and update of the package first.\n\n\nDeploy Command\n\n\ngenyman deploy\n\n\nThe deploy command will build your code generator tool, pack it to a nupkg file and then push it to the specified, or default Nuget source.\n\n\nsource option\n\n\ngenyman deploy --source \nYOUR_NUGET_SOURCE_URL\n\n\nIf you want to deploy to a private or local Nuget source, you can specify it with the source option.\n\n\napikey option\n\n\ngenyman deploy --apikey \nYOUR_API_KEY\n\n\nWhen you deploy to a Nuget source that needs an API key to publish, you need to specificy this option.\n\n\nmajor, minor, build option\n\n\ngenyman deploy --major\n\n\nBefore deployment using these options you can automatically increase a part of the version. If not specified \n--build\n is added by default.\n\n\nAll Command\n\n\ngenyman all\n\n\nWill scan the current folder for all \ngenyman\n configuration files and will execute them all.\n\n\nrecursive option\n\n\ngenyman all --recursive\n\n\nThe \nrecursive\n option will scan not only the current folder, but all subfolders as well.\n\n\nupdate option\n\n\ngenyman all --update\n\n\nThe \nupdate\n option will perform and update of the packages first.\n\n\nDoc Command\n\n\ngenyman doc\n\n\nor\n\n\ngenyman doc packageId\n\n\nwill print all properties and classes of the configuration of the generator.\n\n\nmd option\n\n\nYou can even create a Markdown file if you specify a file name together with this option:\n\n\ngenyman doc --md README.md\n\n\nGeneric Options\n\n\nFollowing options are available for all commands.\n\n\noverwrite\n\n\n--overwrite\n\n\nAll commands that generates files, will be able to overwrite existing files when this option is added. Otherwise a warning will be displayed.\n\n\ndiagnostic\n\n\n--diagnostic\n\n\nThis will show you all the Debug log lines together with the regular Info, Warning, Error and Fatal log lines.\n\n\nquiet\n\n\n--quiet\n\n\nIf you don't want a single log line to appear in the console, you can use this option.", 
            "title": "Genyman Cli"
        }, 
        {
            "location": "/reference/genyman-cli/#genyman-cli-tool", 
            "text": "The cli tool is the main tool of  genyman .", 
            "title": "genyman cli tool"
        }, 
        {
            "location": "/reference/genyman-cli/#file-argument", 
            "text": "genyman your-config.json  This argument is used to use the given file as input for the code generator specified in that configuration file. The cli is responsible for downloading, installing and executing the genyman global tool.", 
            "title": "File argument"
        }, 
        {
            "location": "/reference/genyman-cli/#update-option", 
            "text": "genyman your-config.json --update  The  update  option will perform and update of the package first.", 
            "title": "update option"
        }, 
        {
            "location": "/reference/genyman-cli/#new-command", 
            "text": "genyman new  This generates a new code generator solution template.  genyman new packageId  Will generate a new configuration template for the given packageId. \nNote that you can use the fully qualified packageId, or just the last part of the packageId.\nFor example, if you packageId is  MyGreatCompany.Genyman.MyFirstGenerator  you can use  genyman new MyFirstGenerator .", 
            "title": "New Command"
        }, 
        {
            "location": "/reference/genyman-cli/#json-option", 
            "text": "genyman new --json  The json file format is the default format for configuration files. This option is now available for future support of other formats such as xml and yaml.", 
            "title": "json option"
        }, 
        {
            "location": "/reference/genyman-cli/#file-option", 
            "text": "genyman new --file  YOUR_FILENAME  If not specified the default configuration file is created with the name  gm-genyman.json . If you want to use another name you can use this option.", 
            "title": "file option"
        }, 
        {
            "location": "/reference/genyman-cli/#update-option_1", 
            "text": "genyman new --update  The  update  option will perform and update of the package first.", 
            "title": "update option"
        }, 
        {
            "location": "/reference/genyman-cli/#deploy-command", 
            "text": "genyman deploy  The deploy command will build your code generator tool, pack it to a nupkg file and then push it to the specified, or default Nuget source.", 
            "title": "Deploy Command"
        }, 
        {
            "location": "/reference/genyman-cli/#source-option", 
            "text": "genyman deploy --source  YOUR_NUGET_SOURCE_URL  If you want to deploy to a private or local Nuget source, you can specify it with the source option.", 
            "title": "source option"
        }, 
        {
            "location": "/reference/genyman-cli/#apikey-option", 
            "text": "genyman deploy --apikey  YOUR_API_KEY  When you deploy to a Nuget source that needs an API key to publish, you need to specificy this option.", 
            "title": "apikey option"
        }, 
        {
            "location": "/reference/genyman-cli/#major-minor-build-option", 
            "text": "genyman deploy --major  Before deployment using these options you can automatically increase a part of the version. If not specified  --build  is added by default.", 
            "title": "major, minor, build option"
        }, 
        {
            "location": "/reference/genyman-cli/#all-command", 
            "text": "genyman all  Will scan the current folder for all  genyman  configuration files and will execute them all.", 
            "title": "All Command"
        }, 
        {
            "location": "/reference/genyman-cli/#recursive-option", 
            "text": "genyman all --recursive  The  recursive  option will scan not only the current folder, but all subfolders as well.", 
            "title": "recursive option"
        }, 
        {
            "location": "/reference/genyman-cli/#update-option_2", 
            "text": "genyman all --update  The  update  option will perform and update of the packages first.", 
            "title": "update option"
        }, 
        {
            "location": "/reference/genyman-cli/#doc-command", 
            "text": "genyman doc  or  genyman doc packageId  will print all properties and classes of the configuration of the generator.", 
            "title": "Doc Command"
        }, 
        {
            "location": "/reference/genyman-cli/#md-option", 
            "text": "You can even create a Markdown file if you specify a file name together with this option:  genyman doc --md README.md", 
            "title": "md option"
        }, 
        {
            "location": "/reference/genyman-cli/#generic-options", 
            "text": "Following options are available for all commands.", 
            "title": "Generic Options"
        }, 
        {
            "location": "/reference/genyman-cli/#overwrite", 
            "text": "--overwrite  All commands that generates files, will be able to overwrite existing files when this option is added. Otherwise a warning will be displayed.", 
            "title": "overwrite"
        }, 
        {
            "location": "/reference/genyman-cli/#diagnostic", 
            "text": "--diagnostic  This will show you all the Debug log lines together with the regular Info, Warning, Error and Fatal log lines.", 
            "title": "diagnostic"
        }, 
        {
            "location": "/reference/genyman-cli/#quiet", 
            "text": "--quiet  If you don't want a single log line to appear in the console, you can use this option.", 
            "title": "quiet"
        }, 
        {
            "location": "/reference/genyman-core/", 
            "text": "genyman core library\n\n\nThe genyman core library is, as the name is saying it, the core of the genyman tool. It is referenced in every code generator and contains all the functionality to easily build code generators.", 
            "title": "Genyman Core"
        }, 
        {
            "location": "/reference/genyman-core/#genyman-core-library", 
            "text": "The genyman core library is, as the name is saying it, the core of the genyman tool. It is referenced in every code generator and contains all the functionality to easily build code generators.", 
            "title": "genyman core library"
        }, 
        {
            "location": "/reference/handlebars-helpers/", 
            "text": "Handlebars Helpers\n\n\nWithin the Genyman Core Library there are severall Handlebars Helpers to make it easier to generate code.\n\n\nCSharp Helpers\n\n\nString Helpers", 
            "title": "Handlebars Helpers"
        }, 
        {
            "location": "/reference/handlebars-helpers/#handlebars-helpers", 
            "text": "Within the Genyman Core Library there are severall Handlebars Helpers to make it easier to generate code.", 
            "title": "Handlebars Helpers"
        }, 
        {
            "location": "/reference/handlebars-helpers/#csharp-helpers", 
            "text": "", 
            "title": "CSharp Helpers"
        }, 
        {
            "location": "/reference/handlebars-helpers/#string-helpers", 
            "text": "", 
            "title": "String Helpers"
        }, 
        {
            "location": "/reference/fluent-msbuild/", 
            "text": "FluentMSBuild\n\n\nWithin the Genyman Core Library there are severall helper functions to manipulate csproj (CSharp) files. There is a fluent helper to do some basic stuff.\n\n\nSamples\n\n\nAdding (if it not exists) of a file into a project (or shared project).\n\n\nFluentMSBuild.Use(destinationFile).WithBuildAction(BuildAction.ImageAsset).AddToProject();\n\n\n\n\n\nThis will add the destinationFile into the underlying project (destinationFile is for example a cs file or image). The method will look for a csproj (or shared project) in the directory tree above. Next it can be set a BuildAction (like Content, Compile, etc). Finish with the AddToProject method.\n\n\nThe builder is self explaining. If not, drop a question.", 
            "title": "FluentMSBuild"
        }, 
        {
            "location": "/reference/fluent-msbuild/#fluentmsbuild", 
            "text": "Within the Genyman Core Library there are severall helper functions to manipulate csproj (CSharp) files. There is a fluent helper to do some basic stuff.", 
            "title": "FluentMSBuild"
        }, 
        {
            "location": "/reference/fluent-msbuild/#samples", 
            "text": "Adding (if it not exists) of a file into a project (or shared project).  FluentMSBuild.Use(destinationFile).WithBuildAction(BuildAction.ImageAsset).AddToProject();  This will add the destinationFile into the underlying project (destinationFile is for example a cs file or image). The method will look for a csproj (or shared project) in the directory tree above. Next it can be set a BuildAction (like Content, Compile, etc). Finish with the AddToProject method.  The builder is self explaining. If not, drop a question.", 
            "title": "Samples"
        }, 
        {
            "location": "/troubleshooting/", 
            "text": "Troubleshooting\n\n\nzsh\n\n\nWhen using https://ohmyz.sh/ there is currently an issue with using Global Tools in .net core 2.1 and MacOS. For the global tools to work you need to edit the \n.zshrc\n file and add:\n\n\npath\n+=(\n/Users/YOUR_USER_NAME/.dotnet/tools\n)\n\n\nexport\n PATH\n\n\n\n\n\nThe normal \n~/.dotnet/tools\n is not recognized by \nzsh\n.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshooting/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshooting/#zsh", 
            "text": "When using https://ohmyz.sh/ there is currently an issue with using Global Tools in .net core 2.1 and MacOS. For the global tools to work you need to edit the  .zshrc  file and add:  path +=( /Users/YOUR_USER_NAME/.dotnet/tools )  export  PATH  The normal  ~/.dotnet/tools  is not recognized by  zsh .", 
            "title": "zsh"
        }, 
        {
            "location": "/community/", 
            "text": "Community\n\n\nEvery developer can list their \ngenyman\n generators here. Please create a PR or create an issue for your generator to be listed!\n\n\nPackages\n\n\n\n\nGenyman CLI\n - The new command of the CLI is also a Genyman generator\n\n\nIOSDeviceIdentifiers\n - Generates mapping between ios device identifiers and real model names\n\n\nLoco\n - Generates json files for use with https://localise.biz/ in vuejs, xamarin, ...\n\n\nXamarinAssets\n - Based upon a single SVG source create all assets for iOS, Android, UWP for all resolutions.\n\n\nXamarinIcons\n - Based upon a single SVG source create all icons for iOS, Android, UWP for all resolutions.\n\n\nXamarinViewModel\n - Generating boilerplate code for (mobile)ViewModels with Genyman.", 
            "title": "Community"
        }, 
        {
            "location": "/community/#community", 
            "text": "Every developer can list their  genyman  generators here. Please create a PR or create an issue for your generator to be listed!", 
            "title": "Community"
        }, 
        {
            "location": "/community/#packages", 
            "text": "Genyman CLI  - The new command of the CLI is also a Genyman generator  IOSDeviceIdentifiers  - Generates mapping between ios device identifiers and real model names  Loco  - Generates json files for use with https://localise.biz/ in vuejs, xamarin, ...  XamarinAssets  - Based upon a single SVG source create all assets for iOS, Android, UWP for all resolutions.  XamarinIcons  - Based upon a single SVG source create all icons for iOS, Android, UWP for all resolutions.  XamarinViewModel  - Generating boilerplate code for (mobile)ViewModels with Genyman.", 
            "title": "Packages"
        }
    ]
}